colnames(labels_RNA_Extra) <- c("RNA_Extra_labels")
labels_Mix_1000 <- as.data.frame(paste(ggplot_avg_value$Sample, ggplot_avg_value$Mix_1000, sep="_"))
colnames(labels_Mix_1000) <- c("Mix_labels")
labels_Perc_overlap_junct <- as.data.frame(paste(ggplot_avg_value$Sample, ggplot_avg_value$Perc_overlap_junct, sep="_"))
colnames(labels_Perc_overlap_junct) <- c("Perc_overlap_junct_labels")
labels_Reads_mapped_orth_exon <- as.data.frame(paste(ggplot_avg_value$Sample, ggplot_avg_value$Reads_mapped_orth_exon, sep="_"))
colnames(labels_Reads_mapped_orth_exon) <- c("Reads_mapped_orth_exon_labels")
labels_RIN_Score <- as.data.frame(paste(ggplot_avg_value$Sample, ggplot_avg_value$RIN_Score, sep="_"))
colnames(labels_RIN_Score) <- c("RIN_Score_labels")
ggplot_avg_value_labels <- cbind(ggplot_avg_value, labels_RNA_Extra, labels_Mix_1000, labels_Perc_overlap_junct, labels_Reads_mapped_orth_exon, labels_RIN_Score)
sample_means_per_gene <- rowMeans(gene_counts_with_gc_correction)
# Combine this with
exp_and_tech_var <- as.data.frame(cbind(sample_means_per_gene, avg_exp_values_tech[,13], avg_exp_values_tech[,14], avg_exp_values_tech[,15], avg_exp_values_tech[,16], avg_exp_values_tech[,17]))
colnames(exp_and_tech_var) <- c("Mean_all_samples", "Extraction_3_23_12", "Mix_code_1000", "Perc_overlapping_junction", "Reads_mapped_on_ortho_exons", "RIN_score")
View(head(exp_and_tech_var))
exp_RNA_extra_0 <- sample_means_per_gene[which(sample_means_per_gene$Extraction_3_23_12 == 0), ]
dim(exp_and_tech_var)
sample_means_per_gene$Extraction_3_23_12 > 0
str(exp_and_tech_var)
typeof(exp_and_tech_var)
is.matrix(exp_and_tech_var)
# Combine this with
exp_and_tech_var <- as.data.frame(cbind(sample_means_per_gene, avg_exp_values_tech[,13], avg_exp_values_tech[,14], avg_exp_values_tech[,15], avg_exp_values_tech[,16], avg_exp_values_tech[,17]))
colnames(exp_and_tech_var) <- c("Mean_all_samples", "Extraction_3_23_12", "Mix_code_1000", "Perc_overlapping_junction", "Reads_mapped_on_ortho_exons", "RIN_score")
dim(exp_and_tech_var)
# Find which genes have 0 in the best set for RNA Extraction date 3-23-12 and which have 1
exp_RNA_extra_0 <- sample_means_per_gene[which(sample_means_per_gene$Extraction_3_23_12 > 0), ]
summary(sample_means_per_gene
)
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 > 0), ]
dim(exp_RNA_extra_0)
exp_RNA_extra_1 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 > 1), ]
summary(exp_RNA_extra_0)
summary(exp_RNA_extra_1)
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 = 0), ]
exp_RNA_extra_1 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 > 0), ]
ApplyQuintiles <- function(x) {
cut(x, breaks=c(quantile(exp_RNA_extra_0, probs = seq(0, 1, by = 0.20))),
labels=c("0-20","20-40","40-60","60-80","80-100"), include.lowest=TRUE)
}
ApplyQuintiles()
View(exp_RNA_extra_0)
quantile(exp_RNA_extra_0$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
quantile(exp_RNA_extra_1$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 = 0), ]
exp_RNA_extra_1 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 > 0), ]
quantile(exp_RNA_extra_0$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
quantile(exp_RNA_extra_1$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
dim(exp_RNA_extra_0)
dim(exp_RNA_extra_1)
sample_means_per_gene <- rowMeans(gene_counts_with_gc_correction)
# Combine this with
exp_and_tech_var <- as.data.frame(cbind(sample_means_per_gene, avg_exp_values_tech[,13], avg_exp_values_tech[,14], avg_exp_values_tech[,15], avg_exp_values_tech[,16], avg_exp_values_tech[,17]))
colnames(exp_and_tech_var) <- c("Mean_all_samples", "Extraction_3_23_12", "Mix_code_1000", "Perc_overlapping_junction", "Reads_mapped_on_ortho_exons", "RIN_score")
dim(exp_and_tech_var)
# Find which genes have 0 in the best set for RNA Extraction date 3-23-12 and which have 1
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 = 0), ]
dim(exp_RNA_extra_0)
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0), ]
dim(exp_RNA_extra_0)
exp_RNA_extra_1 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 > 0), ]
dim(exp_RNA_extra_1)
quantile(exp_RNA_extra_0$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
quantile(exp_RNA_extra_1$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
quantile(exp_RNA_extra_1$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
quantile(exp_and_tech_var$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
quantile(exp_and_tech_var$Mean_all_samples, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7)
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
Q0 = -4.158937
Q1 = 1.329491
Q2 = 3.764888
Q3 = 5.471154
Q4 = 11.670442
# Find which genes have 0 in the best set for RNA Extraction date 3-23-12 and which have 1
exp_RNA_extra_0 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RNA_extra_0_Q01)
exp_RNA_extra_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RNA_extra_0_Q01)
Q0 = -4.158937
Q1 = 1.329491
Q2 = 3.764888
Q3 = 5.471154
Q4 = 11.670442
# Find which genes have 0 in the best set for RNA Extraction date 3-23-12 and which have 1
exp_RNA_extra_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RNA_extra_0_Q01)
exp_RNA_extra_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RNA_extra_0_Q12)
exp_RNA_extra_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RNA_extra_0_Q23)
exp_RNA_extra_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RNA_extra_0_Q34)
exp_RNA_extra_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RNA_extra_1_Q01)
exp_RNA_extra_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RNA_extra_1_Q12)
exp_RNA_extra_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RNA_extra_1_Q23)
exp_RNA_extra_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Extraction_3_23_12 == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RNA_extra_1_Q34)
install.packages(formattable)
install.packages("formattable")
library("glmnet")
# Load expression data
expression <- read.delim("~/Reg_Evo_Primates/ashlar-trial/data/gc_cyclic_loess_random_var_gene_exp_counts")
expression_t <- t(expression)
# Load variables data
samples <- read.csv("~/Reg_Evo_Primates/ashlar-trial/data/RNA_seq_info.csv")
samples <- as.data.frame(samples)
tech_var <- c(3:8,11,12,16:24)
#Add technical variables
RNA_seq_tech_var <- samples[,tech_var]
dim(RNA_seq_tech_var)
RNA_seq_tech_var <- RNA_seq_tech_var[-31,]
expression_t <- expression_t[-31,]
RNA_species <- model.matrix(~ -1+Species, RNA_seq_tech_var)
RNA_tissue <- model.matrix(~ -1+Tissue, RNA_seq_tech_var)
RNA_extra <- model.matrix(~ -1+RNA.extraction.date, RNA_seq_tech_var)
Multi_mix <- model.matrix(~ -1+Multiplexing.Mixes.Code, RNA_seq_tech_var)
cat_exp_var <- cbind(RNA_species, RNA_tissue, RNA_extra, Multi_mix)
num_exp_var <- RNA_seq_tech_var[,7:17]
num_exp_var <- num_exp_var[,-6]
# Make the matrix with biological and technical variables
exp_var_no_NA <- cbind(cat_exp_var, num_exp_var)
exp_var_no_NA <- as.matrix(exp_var_no_NA)
dim(exp_var_no_NA)
best_set <- array(NA, dim= c(28, 16616))
l = 1
for(l in 1:16616){
#Define the response variable
resp_var <- as.matrix(expression_t[,l])
glmmod<-glmnet(x=exp_var_no_NA,y=resp_var, standardize = TRUE, intercept = FALSE, alpha = 1, penalty.factor = p.fac)
best_set[,l] <- as.matrix(coef(glmmod, s =0.08845252))
#print(l)
}
# Do not penalize tissue and species
p.fac = rep(1,28)
p.fac[c(1:7)] = 0
best_set <- array(NA, dim= c(28, 16616))
l = 1
for(l in 1:16616){
#Define the response variable
resp_var <- as.matrix(expression_t[,l])
glmmod<-glmnet(x=exp_var_no_NA,y=resp_var, standardize = TRUE, intercept = FALSE, alpha = 1, penalty.factor = p.fac)
best_set[,l] <- as.matrix(coef(glmmod, s =0.08845252))
#print(l)
}
library(formattable)
DF <- data.frame(RNA_Extra_date_in_best_set =c("Yes", "No"), Q0-Q1=c("1188", "2966"), Q1-Q2=c("640", "3514"), Q2-Q3=c("395", "3759"), Q3-Q4=c("288", "3866"))
formattable(DF)
DF <- data.frame(RNA_Extra_date_in_best_set=c("Yes", "No"), Q1=c("1188", "2966"), Q2=c("640", "3514"), Q3=c("395", "3759"), Q4=c("288", "3866"))
formattable(DF)
DF <- data.frame(RNA_Extra_date_in_best_set=c("Yes", "No", "Ratio"), Q1=c("1188", "2966", "0.401"), Q2=c("640", "3514", "0.182"), Q3=c("395", "3759", "0.110"), Q4=c("288", "3866", "0.074"))
formattable(DF)
ggplot(ggplot_avg_value_labels, aes(factor(RIN_Score_labels), Avg_Expression)) +  geom_boxplot() + ylab("Normalized expression values (averaged over inds.)") + labs(title = "Expression values including genes with and without RIN Score") + xlab("Tissue-species + whether or not tech. factor included") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(best_set)
library("formattable")
best_set_copy <- best_set
best_set_copy[best_set_copy != 0] <- 1
var_score <- rowSums(best_set_copy)
best_set_intercept_false_copy <- best_set
best_set_intercept_false_copy[best_set_intercept_false_copy != 0] <- 1
var_score_false <- rowSums(best_set_intercept_false_copy)
View(var_score)
View(var_score_false)
summary(colSums(best_set_copy))
length(which(colSums(best_set_copy) == 7)
)
length(which(colSums(best_set_copy) == 7))
length(which(colSums(best_set_copy) == 8))
# Find how many genes include 2 techincal factors in the best set
length(which(colSums(best_set_copy) == 9))
5345+4058+3147
length(which(colSums(best_set_copy) == 10))
5345+4058+3147+1787
length(which(colSums(best_set_copy) > 10))
length(which(colSums(best_set_copy) == 12))
length(which(colSums(best_set_copy) > 12))
length(which(colSums(best_set_copy) == 11))
length(which(colSums(best_set_copy) == 12))
DF <- data.frame(Number_of_tech_var_in_best_set=c("0", "1", "2", "3", "4", "5", "6+"), Number_of_genes=c("5345","4058","3147","1787","922","537","820"))
formattable(DF)
# Find how many genes do not include any technical factors in the best set
length(which(colSums(best_set_copy) == 7))
# Find how many genes include 1 technical factor in the best set
length(which(colSums(best_set_copy) == 8))
# Find how many genes include 2 techincal factors in the best set
length(which(colSums(best_set_copy) == 9))
# Find how many genes include 3 techincal factors in the best set
length(which(colSums(best_set_copy) == 10))
# Find how many genes include 4 techincal factors in the best set
length(which(colSums(best_set_copy) == 11))
# Find how many genes include 5 techincal factors in the best set
length(which(colSums(best_set_copy) == 12))
# Find how many genes include 6 or more techincal factors in the best set
length(which(colSums(best_set_copy) > 12))
# Make a table of the results
DF <- data.frame(Number_of_tech_var_in_best_set=c("0", "1", "2", "3", "4", "5", "6+"), Number_of_genes=c("5345","4058","3147","1787","922","537","820"))
formattable(DF)
exp_RIN_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_0_Q01)
exp_RIN_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_0_Q01)
exp_RIN_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RIN_0_Q12)
exp_RIN_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RIN_0_Q23)
exp_RIN_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RIN_0_Q34)
exp_RIN_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_1_Q01)
exp_RNA_extra_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RIN_1_Q12)
exp_RIN_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RIN_1_Q23)
exp_RIN_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RIN_1_Q34)
exp_RIN_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_0_Q01)
exp_RIN_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RIN_0_Q12)
exp_RIN_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RIN_0_Q23)
exp_RIN_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RIN_0_Q34)
exp_RIN_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_1_Q01)
exp_RNA_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RIN_1_Q12)
exp_RIN_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RIN_1_Q23)
exp_RIN_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RIN_1_Q34)
exp_RIN_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_0_Q01)
exp_RIN_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RIN_0_Q12)
exp_RIN_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RIN_0_Q23)
exp_RIN_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RIN_0_Q34)
exp_RIN_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_RIN_1_Q01)
exp_RIN_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_RIN_1_Q12)
exp_RIN_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_RIN_1_Q23)
exp_RIN_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$RIN_score == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_RIN_1_Q34)
DF <- data.frame(RNA_RIN_Score_in_best_set=c("Yes", "No", "Ratio"), Q1=c("581", "3573", "0.401"), Q2=c("309", "3845", "0.182"), Q3=c("196", "3958", "0.110"), Q4=c("72", "4082", "0.074"))
formattable(DF)
DF <- data.frame(RNA_RIN_Score_in_best_set=c("Yes", "No", "Ratio"), Q1=c("581", "3573", "0.163"), Q2=c("309", "3845", "0.080"), Q3=c("196", "3958", "0.050"), Q4=c("72", "4082", "0.018"))
formattable(DF)
head(exp_and_tech_var)
exp_Mix_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Mix_0_Q01)
exp_Mix_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Mix_0_Q01)
exp_Mix_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_Mix_0_Q12)
exp_Mix_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_Mix_0_Q23)
exp_Mix_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_Mix_0_Q34)
exp_Mix_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Mix_1_Q01)
exp_Mix_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_Mix_1_Q12)
exp_Mix_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_Mix_1_Q23)
exp_Mix_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Mix_code_1000 == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_Mix_1_Q34)
DF <- data.frame(Mix_code_1000_in_best_set=c("Yes", "No", "Ratio"), Q1=c("1281", "2873", "0.446"), Q2=c("571", "3583", "0.159"), Q3=c("383", "3771", "0.102"), Q4=c("287", "3867", "0.074"))
formattable(DF)
exp_Perc_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Perc_0_Q01)
exp_Perc_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_Perc_0_Q12)
exp_Perc_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_Perc_0_Q23)
exp_Perc_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_Perc_0_Q34)
exp_Perc_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Perc_1_Q01)
exp_Perc_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_Perc_1_Q12)
exp_Perc_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_Perc_1_Q23)
exp_Perc_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Perc_overlapping_junction == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_Perc_1_Q34)
DF <- data.frame(Perc_overlapping_junction_in_best_set=c("Yes", "No", "Ratio"), Q1=c("1242", "2912", "0.446"), Q2=c("994", "3160", "0.159"), Q3=c("709", "3445", "0.102"), Q4=c("489", "3665", "0.074"))
formattable(DF)
exp_Orth_0_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 0 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Orth_0_Q01)
exp_Orth_0_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 0 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_Orth_0_Q12)
exp_Orth_0_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 0 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_Orth_0_Q23)
exp_Orth_0_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 0 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_Orth_0_Q34)
exp_Orth_1_Q01 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 1 & exp_and_tech_var$Mean_all_samples >= Q0 & exp_and_tech_var$Mean_all_samples < Q1 ), ]
dim(exp_Orth_1_Q01)
exp_Orth_1_Q12 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 1 & exp_and_tech_var$Mean_all_samples >= Q1 & exp_and_tech_var$Mean_all_samples < Q2 ), ]
dim(exp_Orth_1_Q12)
exp_Orth_1_Q23 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 1 & exp_and_tech_var$Mean_all_samples >= Q2 & exp_and_tech_var$Mean_all_samples < Q3 ), ]
dim(exp_Orth_1_Q23)
exp_Orth_1_Q34 <- exp_and_tech_var[which(exp_and_tech_var$Reads_mapped_on_ortho_exons == 1 & exp_and_tech_var$Mean_all_samples >= Q3 & exp_and_tech_var$Mean_all_samples < Q4 ), ]
dim(exp_Orth_1_Q34)
# Make a table of the values
DF <- data.frame(Perc_overlapping_junction_in_best_set=c("Yes", "No", "Ratio"), Q1=c("1092", "3062", "0.357"), Q2=c("655", "3499", "0.187"), Q3=c("423", "3731", "0.113"), Q4=c("255", "3899", "0.065"))
formattable(DF)
dim(Best_set_bio_tech_var)
dim(t_Best_set_bio_tech_var)
head(t_Best_set_bio_tech_var)
rowSum(t_Best_set_bio_tech_var)
num_tech_var <- rowSums(t_Best_set_bio_tech_var)
dim(num_tech_var)
num_tech_var <- as.data.frame(rowSums(t_Best_set_bio_tech_var))
dim(num_tech_var)
head(num_tech_var)
num_tech_var <- as.data.frame(rowSums(t_Best_set_bio_tech_var)-7)
summary(num_tech_var)
avg_exp_num_tech_var <- cbind(exp_and_tech_var$Mean_all_samples, num_tech_var)
plot(avg_exp_num_tech_var)
boxplot(avg_exp_num_tech_var)
num_tech_var <- as.data.frame(rowSums(t_Best_set_bio_tech_var)-7)
summary(num_tech_var)
avg_exp_num_tech_var <- cbind(num_tech_var, exp_and_tech_var$Mean_all_samples)
boxplot(avg_exp_num_tech_var)
View(avg_exp_num_tech_var)
avg_exp_num_tech_var <- cbind(num_tech_var, exp_and_tech_var$Mean_all_samples)
colnames(avg_exp_num_tech_var) <- c("Num_tech_var", "Avg_Expression")
ggplot(avg_exp_num_tech_var, aes(factor(Num_tech_var), Avg_Expression)) +  geom_boxplot()
ggplot(avg_exp_num_tech_var, aes(factor(Num_tech_var), Avg_Expression)) +  geom_boxplot() + ylab("Normalized expression values (averaged over all inds.)") + labs(title = "Expression values versus technical factors in the best set") + xlab("Number of technical factors included in the best set analysis")
5345+4058+3147+1787
5345+4058+3147+1787+922
ggplot(avg_exp_num_tech_var, aes(factor(Num_tech_var), Avg_Expression)) +  geom_boxplot() + geom_jitter()
counts_genes <- read.delim("~/Reg_Evo_Primates/ashlar-trial/data/counts_genes.txt")
dim(counts_genes)
library("gplots")
library("ggplot2")
library("formattable")
library("RColorBrewer")
library("scales")
library("edgeR")
source("~/Reg_Evo_Primates/ashlar-trial/analysis/functions.R")
colors <- colorRampPalette(c(brewer.pal(9, "Blues")[1],brewer.pal(9, "Blues")[9]))(100)
pal <- c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))
samples <- read.csv("~/Reg_Evo_Primates/ashlar-trial/data/Sample_info_RNAseq.csv")
labels <- paste(samples$Species, samples$Tissue, sep=" ")
dge_original <- DGEList(counts=as.matrix(counts_genes), genes=rownames(counts_genes), group = as.character(t(labels)))
dge_original <- calcNormFactors(dge_original)
expr_cutoff <- 1
tmm_cpm <- cpm(dge_original, normalized.lib.sizes=TRUE, log=TRUE, prior.count = 0.25)
head(tmm_cpm)
hist(tmm_cpm, main = "log2(CPM) values in unfiltered data (n = 48 samples)", breaks = 100, ylim = c(0, 50000), xlab = "log2(CPM) values")
abline(v = expr_cutoff, col = "red", lwd = 3)
expr_cutoff <- 1.5
tmm_cpm <- cpm(dge_original, normalized.lib.sizes=TRUE, log=TRUE, prior.count = 0.25)
head(tmm_cpm)
hist(tmm_cpm, main = "log2(CPM) values in unfiltered data (n = 48 samples)", breaks = 100, ylim = c(0, 50000), xlab = "log2(CPM) values")
abline(v = expr_cutoff, col = "red", lwd = 3)
cpm_filtered <- cpm[rowSums(cpm > 1.5) >= 24, ]
dim(cpm_filtered)
cpm <- cpm(dge_original, normalized.lib.sizes=TRUE, log=TRUE, prior.count = 0.25)
head(tmm_cpm)
hist(tmm_cpm, main = "log2(CPM) values in unfiltered data (n = 48 samples)", breaks = 100, ylim = c(0, 50000), xlab = "log2(CPM) values")
abline(v = expr_cutoff, col = "red", lwd = 3)
cpm_filtered <- cpm[rowSums(cpm > 1.5) >= 24, ]
dim(cpm_filtered)
nrows(cpm_filtered)
nrow(cpm_filtered)
head(cpm_filtered)
inshared_lists = row.names(counts_genes) %in% rownames(cpm_filtered)
inshared_lists_data <- as.data.frame(inshared_lists)
counts_genes_in <- cbind(counts_genes, inshared_lists_data)
counts_genes_in_cutoff <- subset(counts_genes_in, inshared_lists_data == "TRUE")
counts_genes_in_cutoff <- counts_genes_in_cutoff[,1:48]
dim(counts_genes_in_cutoff)
dge_in_cutoff <- DGEList(counts=as.matrix(counts_genes_in_cutoff), genes=rownames(counts_genes_in_cutoff), group = as.character(t(labels)))
dge_in_cutoff <- calcNormFactors(dge_in_cutoff)
cpm_in_cutoff <- cpm(dge_in_cutoff, normalized.lib.sizes=TRUE, log=TRUE, prior.count = 0.25)
head(cpm_in_cutoff)
hist(cpm_in_cutoff, xlab = "Log2(CPM)", main = "Log2(CPM) values for genes meeting the filtering criteria", breaks = 100 )
all_hearts <- c(1,5,9,13,17, 21,25,29,33,37,41,45)
all_kidneys <- c(2,6,10,14,18, 22,26,30,34,38,42,46)
all_livers <- c(3,7,11,15,19, 23,27,31,35,39,43,47)
all_lungs <- c(4,8,12,16,20, 24,28,31,36,40,44,48)
col = as.data.frame(pal[as.numeric(samples$Species)])
col_hearts = col[all_hearts,]
col_kidneys = col[all_kidneys, ]
col_livers = col[all_livers, ]
col_lungs = col[all_lungs, ]
group = as.data.frame(samples$Species)
group_hearts = group[all_hearts, ]
group_kidneys = group[all_kidneys, ]
group_livers = group[all_livers, ]
group_lungs = group[all_lungs, ]
plotDensities(cpm_in_cutoff[,all_hearts], col=col_hearts, legend = FALSE)
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm_in_cutoff[,all_hearts], col=col_hearts, legend = FALSE, main = "Density plots for genes passing filtering criteria in hearts")
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm[,1:16], group=samples$Tissue, col=pal[as.numeric(samples$Tissue)], legend = "topright", main = "Density plot for genes passing filtering criteria (all chimpanzees)")
plotDensities(cpm_in_cutoff[,all_hearts], col=col_hearts, legend = FALSE, main = "Density plot for genes passing filtering criteria (all hearts)")
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm_in_cutoff[,1:16], group=samples$Tissue, col=pal[as.numeric(samples$Tissue)], legend = "topright", main = "Density plot for genes passing filtering criteria (all chimpanzees)")
View(head(counts_genes_in_cutoff))
counts_genes_in_cutoff <- counts_genes_in_cutoff[,-17]
dim(counts_genes_in_cutoff)
samples <- samples[-17,]
labels <- paste(samples$Species, samples$Tissue, sep=" ")
# Take the TMM of the genes that meet the criteria
dge_in_cutoff <- DGEList(counts=as.matrix(counts_genes_in_cutoff), genes=rownames(counts_genes_in_cutoff), group = as.character(t(labels)))
dge_in_cutoff <- calcNormFactors(dge_in_cutoff)
cpm_in_cutoff <- cpm(dge_in_cutoff, normalized.lib.sizes=TRUE, log=TRUE, prior.count = 0.25)
head(cpm_in_cutoff)
head(summary(cpm_in_cutoff))
hist(cpm_in_cutoff, xlab = "Log2(CPM)", main = "Log2(CPM) values for genes meeting the filtering criteria", breaks = 100 )
all_hearts <- c(1,5,9,13, 20,24,28,32,36,40,44)
all_kidneys <- c(2,6,10,14,17, 21,25,29,33,37,41,45)
all_livers <- c(3,7,11,15,18, 22,26,30,34,38,42,46)
all_lungs <- c(4,8,12,16,19, 23,27,31,35,39,43,47)
col = as.data.frame(pal[as.numeric(samples$Species)])
col_hearts = col[all_hearts,]
col_kidneys = col[all_kidneys, ]
col_livers = col[all_livers, ]
col_lungs = col[all_lungs, ]
group = as.data.frame(samples$Species)
group_hearts = group[all_hearts, ]
group_kidneys = group[all_kidneys, ]
group_livers = group[all_livers, ]
group_lungs = group[all_lungs, ]
plotDensities(cpm_in_cutoff[,all_hearts], col=col_hearts, legend = FALSE, main = "Density plot for genes passing filtering criteria (all hearts)")
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm_in_cutoff[,1:16], group=samples$Tissue, col=pal[as.numeric(samples$Tissue)], legend = "topright", main = "Density plot for genes passing filtering criteria (all chimpanzees)")
## To make contrasts easier to formulate, we rename factors species and tissue in a single factor
condition <- factor(paste(samples$Species,samples$Tissue,sep="."))
design <- model.matrix(~ 0 + condition)
colnames(design) <- gsub("condition", "", dput(colnames(design)))
# Voom with individual as a random variable
cpm.voom.cyclic <- voom(dge_gc, design, normalize.method="cyclicloess", plot=T)
corfit <- duplicateCorrelation(cpm.voom.cyclic, design, block=samples$Individual)
cpm.voom.cyclic <- voom(dge_in_cutoff, design, normalize.method="cyclicloess", plot=T)
corfit <- duplicateCorrelation(cpm.voom.cyclic, design, block=samples$Individual)
corfit$consensus.correlation
corfit$consensus
# Final voom on filtered data
cpm.voom.cyclic <- voom(dge_gc, design, normalize.method="cyclicloess", plot=TRUE, block=samples$Individual, correlation=corfit$consensus)
boxplot(cpm.voom.cyclic$E, col = pal[as.numeric(samples$Tissue)])
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Density plot of normalized expression data for genes passing filtering criteria (all hearts))
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
cpm.voom.cyclic <- voom(dge_in_cutoff, design, normalize.method="cyclicloess", plot=TRUE, block=samples$Individual, correlation=corfit$consensus)
boxplot(cpm.voom.cyclic$E, col = pal[as.numeric(samples$Tissue)])
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Density plot of normalized expression data for genes passing filtering criteria (all hearts))
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Density plot of normalized expression data for genes passing filtering criteria (all hearts)")
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Density plot of normalized expression data for genes passing filtering criteria (all hearts)")
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Normalized expression data for genes passing filtering criteria (all hearts)") legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
group_hearts
col_hearts
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Normalized expression data for genes passing filtering criteria (all hearts)") legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
plotDensities(cpm.voom.cyclic[,all_hearts], col = col_hearts, legend = FALSE, main = "Normalized expression data for genes passing filtering criteria (all hearts)")
legend('topright', legend = levels(group_hearts), col = levels(col_hearts), pch = 20)
pca_genes <- prcomp(t(cpm.voom.cyclic$E), scale = F)
scores <- pca_genes$x
for (n in 1:4){
col.v <- pal[as.integer(samples$Tissue)]
plot_scores(pca_genes, scores, n, n+1, col.v)
}
for (n in 1:2){
col.v <- pal[as.integer(samples$Tissue)]
plot_scores(pca_genes, scores, n, n+1, col.v)
}
cors <- cor(cpm.voom.cyclic$E, method="spearman", use="pairwise.complete.obs")
heatmap.2( cors, scale="none", col = colors, margins = c(12, 12), trace='none', denscol="white", labCol=labels, ColSideColors=pal[as.integer(as.factor(samples$Species))], RowSideColors=pal[as.integer(as.factor(samples$Tissue))+9], cexCol = 0.2 + 1/log10(15), cexRow = 0.2 + 1/log10(15))
cors <- cor(cpm.voom.cyclic$E, method="pearson", use="pairwise.complete.obs")
heatmap.2( cors, scale="none", col = colors, margins = c(12, 12), trace='none', denscol="white", labCol=labels, ColSideColors=pal[as.integer(as.factor(samples$Species))], RowSideColors=pal[as.integer(as.factor(samples$Tissue))+9], cexCol = 0.2 + 1/log10(15), cexRow = 0.2 + 1/log10(15))
expression_t <- t(cpm.voom.cyclic$E)
View(expression_t)
samples <- read.csv("~/Reg_Evo_Primates/ashlar-trial/data/RNA_seq_info.csv")
samples <- as.data.frame(samples)
#Use the biological variables (tissue and species) and the technical variables that were correlated with tissue and species
tech_var <- c(3:8,11,12,16:24)
#Add technical variables
RNA_seq_tech_var <- samples[,tech_var]
dim(RNA_seq_tech_var)
expression_t <- t(cpm.voom.cyclic$E)
# Load variables data
samples <- read.csv("~/Reg_Evo_Primates/ashlar-trial/data/RNA_seq_info.csv")
samples <- as.data.frame(samples)
#Use the biological variables (tissue and species) and the technical variables that were correlated with tissue and species
tech_var <- c(3:8,11,12,16:24)
#Add technical variables
RNA_seq_tech_var <- samples[,tech_var]
dim(RNA_seq_tech_var)
# Take out 1 row because contains an "NA"
RNA_seq_tech_var <- RNA_seq_tech_var[-31,]
expression_t <- expression_t[-31,]
#Set up the matrix of all technical variables
RNA_species <- model.matrix(~ -1+Species, RNA_seq_tech_var)
RNA_tissue <- model.matrix(~ -1+Tissue, RNA_seq_tech_var)
RNA_extra <- model.matrix(~ -1+RNA.extraction.date, RNA_seq_tech_var)
Multi_mix <- model.matrix(~ -1+Multiplexing.Mixes.Code, RNA_seq_tech_var)
cat_exp_var <- cbind(RNA_species, RNA_tissue, RNA_extra, Multi_mix)
num_exp_var <- RNA_seq_tech_var[,7:17]
num_exp_var <- num_exp_var[,-6]
# Make the matrix with biological and technical variables
exp_var_no_NA <- cbind(cat_exp_var, num_exp_var)
exp_var_no_NA <- as.matrix(exp_var_no_NA)
dim(exp_var_no_NA)
